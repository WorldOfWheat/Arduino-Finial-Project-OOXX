@startuml

interface ICell {
	+Player getDrawer()
	+void setDrawer(Player player)
	+bool isFilled()
}

class Cell {
	+Cell()
	+Cell(Player drawer)
	+Player getDrawer()
	+void setDrawer(Player player)
	+bool isFilled()
}

interface IBoard {
	+void draw(Coordinate coordinate, Player currentPlayer)
	+void erase(Coordinate coordinate)
	+bool is_board_full()
	+bool is_board_empty()
	+Cell get_cell(Coordinate coordinate)
	+byte get_row_size()
	+byte get_col_size()
	+void reset()
}

class Board {
	-Cell cells[4][4]
	+Board()
}

class BoardPrinter {
	-IBoard board
	-void print_split()
	-void print_row(int row)
	+BoardPrinter(IBoard board)
	+void print()
}

enum GameStatus {
	WIN,
	DRAW,
	Playing
}

class GameResult {
	+GameStatus status
	+Player winner
	+GameResult()
	+GameResult(bool isDraw)
	+GameResult(Player winner)
}

interface IGameJudge {
	+GameResult judge(Board board)
}

class GameJudge {
	-IBoard board
	-bool is_row_filled(byte row)
	-Cell get_row_winner(byte row)
	-bool is_column_filled(byte column)
	-Cell get_column_winner(byte column)
	-bool is_slash_filled()
	-Cell get_slash_winner()
	-bool is_backslash_filled()
	-Cell get_backslash_winner()
	+GameJudge(IBoard board)
}

class Coordinate {
	+byte x
	+byte y
	+Coordinate(byte x = -1, byte y = -1)
}

enum PlayerType {
	O,
	X
}

class Player {
	-PlayerType type
	+Player(PlayerType type)
	+PlayerType getType()
	+void play(Coordinate coordinate)
}

class BestMoveResult {
	+Coordinate coordinate
	+int alpha
	+int beta
	+int value
	+BestMoveResult()
	+BestMoveResult(int value)
	+BestMoveResult(Coordinate coord, int alpha, int beta, int value)
}

class Robot {
	-Player robot_player
	-IBoard board
	-byte difficulty
	-bool decide_strategy()
	+Robot(Player robot_player, IBoard board)
	+void play()
}

interface Strategy {
	+Coordinate get_best_move()
}

class MinimaxStrategy {
	-IBoard* board
	-GameJudge game_judge
	-Player robot_player
	-byte max_depth = 3
	-Player get_opponent()
	-BestMoveResult minimax(Player player, byte alpha, byte beta, byte depth = 0)
	+MinimaxStrategy(Player robot_player, IBoard board)
}

class RandomStrategy {
	-Player robot_player
	-IBoard board
	+RandomStrategy(Player robot_player, IBoard board)
}

interface IDisplay {
	+void showWelcome()
	+void showBoard()
	+void showGameOver()
	+void showSettings()
	+void showDifficulty(byte difficulty)
	+void showTurn(bool turn)
	+void showIfUseBot(bool use)
	+void showDraw()
	+void showWinner(PlayerType type)
	+void showError()
	+void showCalculating()
	+void resetCalculating()
}

class SerialDisplay {
	-IBoard board
	-void printRow(byte row)
	-void printBoardSpliter()
	-void printBoard()
	-void printDifficultyString(byte difficulty)
	+SerialDisplay(IBoard* board)
}

class OLED {
	-Adafruit_SSD1306 display
	-byte width
	-byte height
	-void printRow(byte row)
	-void printBoardSpliter()
	-void printBoard()
	-void printDifficultyString(byte difficulty)
	+OLED(IBoard* board)
}

interface IKeyInput {
	+char get_key()
}

class Keyboard {
	+char Keyboard()
}

class KeyPad {
	-char prev_key
	+char KeyPad()
}

Cell .down.|> ICell

Board .up.> ICell
Board .down.> Coordinate
Board .down.> Player
Board .left.|> IBoard

BoardPrinter ..> IBoard

GameResult ..> GameStatus
GameJudge ..> GameResult
GameJudge ..|> IGameJudge
GameJudge .up.> IBoard

Player .right.> PlayerType

BestMoveResult .down.> Coordinate

MinimaxStrategy .right.|> Strategy
MinimaxStrategy .down.> BestMoveResult
MinimaxStrategy .left.> IBoard
MinimaxStrategy .up.> Player

RandomStrategy ..|> Strategy
RandomStrategy .left.> IBoard
RandomStrategy .left.> Player

Robot .left.> IBoard
Robot --> Strategy
Robot .right.> Player

SerialDisplay .left.|> IDisplay
SerialDisplay .down.> IBoard
SerialDisplay .up.> PlayerType
OLED .right.|> IDisplay
OLED .down.> IBoard
OLED .up.> PlayerType

Keyboard .up.|> IKeyInput
KeyPad .up.|> IKeyInput

@enduml